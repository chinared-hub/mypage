{"pageProps":{"post":{"filename":"programming/[Java]内部类简析.md","title":"Java内部类简析","excerpt":"Java内部类与静态内部类的区别","date":"2019-05-16T10:35:07.322Z","updated":"2019-05-16T10:35:07.322Z","preText":"☕","preTextColor":"rgb(230, 230, 230)","content":"<h1>Java内部类简析</h1>\n<p>创建一个 Root.java 类文件</p>\n<p>类文件的内容如下</p>\n<pre><code class=\"language-java\">public class Root {\n    // 内部类 - A\n    public class A {\n\n    }\n    // 静态内部类 - B\n    public static class B {\n        \n    }\n}\n</code></pre>\n<p>打开控制台，输入 javac Root.java ，将文件进行编译</p>\n<p><img src=\"https://resource.1024kb.top/image/code-sample/javac.root.java.png\" alt=\"img\"></p>\n<p>命令执行完毕后，会生成 3 个额外的文件</p>\n<p><img src=\"https://resource.1024kb.top/image/code-sample/javac.root.others.png\" alt=\"imgs\"></p>\n<p>反编译其中 .class 后缀的文件，可以看到</p>\n<p>Root.class 文件内容如下：</p>\n<pre><code class=\"language-java\">public class Root {\n    public Root() {\n    }\n\n    public static void main(String[] var0) throws Throwable {\n    }\n\n    public static class B {\n        public B() {\n        }\n    }\n\n    public class A {\n        public A() {\n        }\n    }\n}\n</code></pre>\n<p>Root$A.class</p>\n<pre><code class=\"language-java\">public class Root$A {\n    public Root$A(Root var1) {\n        this.this$0 = var1;\n    }\n}\n</code></pre>\n<p>Root$B.class</p>\n<pre><code class=\"language-java\">public class Root$B {\n    public Root$B() {\n    }\n}\n</code></pre>\n<p>观察A、B文件</p>\n<p>Root$A.class 文件对应最开始编写的<strong>内部类 - A</strong>，</p>\n<p>Root$B.class 对应<strong>静态内部类 - B</strong></p>\n<h1>区别</h1>\n<p><code>Root$A</code> 构造函数增加了一个 <code>Root var1</code> 入参并且持有引用：<code>this.this$0 = var1</code></p>\n<p>而<code>Root$B</code> 仅仅持有空的构造函数</p>\n<h1>结论</h1>\n<p>说明<strong>内部类</strong>是持有<strong>外部类</strong>的引用，能够获取外部类的信息，而<strong>静态内部类</strong>与<strong>外部类</strong>的关系是相互独立的，只不过静态内部类“躲”在别人身体里罢了</p>\n"}},"__N_SSG":true}